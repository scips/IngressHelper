// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(["jquery", "underscore", "application/views/screen", "highcharts", "highchartsmore", "highchartsexport"], function($, _, ScreenView, Highcharts, HighchartsMore, HighchartsExport) {
  var screen1ScreenView;
  return screen1ScreenView = (function(_super) {

    __extends(screen1ScreenView, _super);

    screen1ScreenView.prototype.getItemTemplate = function() {
      return "<li>\n  <%= direction %>: \n  <select name=\"<%= direction %>\">\n    <% for(i=0;i<=8;i++)\n    {\n      if(i==value) \n        print('<option value=\"'+i+'\" selected>'+i+'</option>'); \n      else\n        print('<option value=\"'+i+'\">'+i+'</option>'); \n    }\n    %>\n  </select>\n</li>";
    };

    function screen1ScreenView(divID) {
      this.divID = divID;
      screen1ScreenView.__super__.constructor.call(this, this.divID);
    }

    screen1ScreenView.prototype.setCallbackListUpdate = function(callbackListUpdate) {
      this.callbackListUpdate = callbackListUpdate;
      return $("" + this.divID + " .list").on("change", this.callbackListUpdate);
    };

    screen1ScreenView.prototype.show = function() {
      var html;
      html = this.parseTemplate();
      $("" + this.divID + " .list").html(html);
      this.displayGraph();
      return screen1ScreenView.__super__.show.call(this);
    };

    screen1ScreenView.prototype.parseTemplate = function() {
      var key, liItem, list, template, value;
      template = this.getItemTemplate();
      if (this.data) {
        return list = (function() {
          var _ref, _results;
          _ref = this.data;
          _results = [];
          for (key in _ref) {
            value = _ref[key];
            liItem = {
              direction: key,
              value: value
            };
            console.log(liItem);
            _results.push(_.template(template, liItem));
          }
          return _results;
        }).call(this);
      }
    };

    screen1ScreenView.prototype.displayGraph = function() {
      var key, legend, options, value, values;
      legend = {
        0: "N",
        45: "NE",
        90: "E",
        135: "SE",
        180: "S",
        225: "SW",
        270: "W",
        315: "NW"
      };
      options = {
        chart: {
          renderTo: 'portalchart',
          polar: true,
          className: 'portalchart',
          backgroundColor: "#000"
        },
        title: null,
        credits: {
          enabled: false
        },
        legend: {
          enabled: false
        },
        navigation: {
          buttonOptions: {
            enabled: false
          }
        },
        pane: {
          startAngle: 0,
          endAngle: 360
        },
        xAxis: {
          tickInterval: 45,
          min: 0,
          max: 360,
          lineColor: "#0F0",
          gridLineColor: "#0F0",
          labels: {
            style: {
              color: "#0F0"
            },
            formatter: function() {
              return legend[this.value];
            }
          }
        },
        yAxis: {
          min: 0,
          max: 8,
          lineColor: "#0F0",
          gridLineColor: "#0F0",
          labels: {
            enabled: false
          }
        },
        plotOptions: {
          area: {
            enableMouseTracking: false,
            marker: {
              enabled: false
            }
          },
          series: {
            pointStart: 0,
            pointInterval: 45
          },
          column: {
            pointPadding: 0,
            groupPadding: 0
          }
        },
        series: [
          {
            type: 'area',
            name: 'defaultlevel',
            data: [8, 8, 8, 8, 8, 8, 8, 8]
          }, {
            type: 'area',
            name: 'level',
            data: [0, 0, 0, 0, 0, 0, 0, 0]
          }
        ]
      };
      values = (function() {
        var _ref, _results;
        _ref = this.data;
        _results = [];
        for (key in _ref) {
          value = _ref[key];
          _results.push(value);
        }
        return _results;
      }).call(this);
      options.series[1].data = values;
      return this.mychart = new Highcharts.Chart(options);
    };

    screen1ScreenView.prototype.updateGraph = function(compassDirection, value) {
      var mapCompassDirectionOrder, _ref;
      mapCompassDirectionOrder = {
        N: 0,
        NE: 1,
        E: 2,
        SE: 3,
        S: 4,
        SW: 5,
        W: 6,
        NW: 7
      };
      if (((_ref = this.mychart.series[1]) != null ? _ref.data[mapCompassDirectionOrder[compassDirection]] : void 0) != null) {
        return this.mychart.series[1].data[mapCompassDirectionOrder[compassDirection]].update(value);
      }
    };

    screen1ScreenView.prototype.updateLevel = function(value) {
      return $("" + this.divID + " .level").html(value);
    };

    screen1ScreenView.prototype.updateDistance = function(value) {
      return $("" + this.divID + " .maxlinkdistance").html(value);
    };

    screen1ScreenView.prototype.updateEnergy = function(value) {
      return $("" + this.divID + " .energy").html(value);
    };

    return screen1ScreenView;

  })(ScreenView);
});
